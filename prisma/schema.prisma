// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // On the reverse for SQLite, comment them out
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  userProjects  UserProjects[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id           String         @id @default(cuid())
  name         String
  usersId      String[]
  blocks       Block[]
  createdBy    User           @relation(fields: [user_id], references: [id])
  user_id      String
  projectUsers UserProjects[]
}

model UserProjects {
  project    Project @relation(fields: [project_id], references: [id])
  project_id String
  user       User    @relation(fields: [user_id], references: [id])
  user_id    String

  @@id([project_id, user_id])
}

model Block {
  id         String   @id @default(cuid())
  content    String?
  type       String
  attributes String?
  parentId   String?
  Project    Project? @relation(fields: [projectId], references: [id])
  parent     Block?   @relation("parent", fields: [blockId], references: [id])
  children   Block[]  @relation("parent")
  projectId  String?
  blockId    String?
}
